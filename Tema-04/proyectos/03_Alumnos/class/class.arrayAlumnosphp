<?php

/*
    Clase ArrayAlumnos.php

    Simulará la tabla de alumnos

    Es un array donde cada elemento es una instancia de la clase Alumno

*/


class ArrayAlumnos
{
    private $tabla;


    public function __construct()
    {
        $this->tabla = [];
    }


    /**
     * Get the value of tabla
     */
    public function getTabla()
    {
        return $this->tabla;
    }

    /**
     * Set the value of tabla
     *
     * @return  self
     */
    public function setTabla($tabla)
    {
        $this->tabla = $tabla;

        return $this;
    }


    static public function getCursos()
    {
        $cursos = [
            '1SMR',
            '2SMR',
            '1DAW',
            '2DAW',
            '1ADI',
            '2ADI'
        ];

        asort($cursos);
        return $cursos;
    }

    static public function getAsignatura()
    {
        $asignaturas = [
            '1DAW Base de Datos',
            '1DAW Entornos de Desarrollo',
            '1DAW Formación y Orentación Laboral',
            '1DAW Lenguaje de Marcas y Sistemas de Gestión de Información',
            '1DAW Programación',
            '1DAW Sistemas Informáticos',
            '2DAW Desarrollo Web Entorno Cliente',
            '2DAW Desarrollo Web Entorno Servidor',
            '2DAW Despliegue de Aplicaciones Web'
        ];

        asort($asignaturas);

        return $asignaturas;
    }

    public function getDatos()
    {

        //Articulo 1
        $alumno = new Alumno(
            1,
            'Juan Manuel',
            'Herrera',
            'manuelgarvaz@educaand.es',
            '06/03/2002',
            3,
            [6, 7, 8]
        );

        //Se añade el artículo a la tabla
        $this->tabla[] = $alumno;

        //Articulo 2
        $alumno = new Alumno(
            2,
            'Jonathan',
            'León Canto',
            'jleocan773@g.educaand.es',
            '19/06/2000',
            3,
            [6, 7, 8]
        );

        // Se añade el artículo a la tabla
        $this->tabla[] = $alumno;


        //Articulo 3
        $alumno = new Alumno(
            1, 
            'Ricardo', 
            'Moreno Cantea', 
            'rmorcan@g.educaand.es', 
            '13/05/2004', 
            3, 
            [6, 7, 8]
        );

        // Se añade el artículo a la tabla
        $this->tabla[] = $articulo;

        //Articulo 4
        $articulo = new Articulo(
            4,
            'Laptop Dell XPS 13',
            'Dell XPS 13-9370',
            5,
            [2, 3],
            10,
            1199.99
        );

        // Se añade el artículo a la tabla
        $this->tabla[] = $articulo;

        //Articulo 5
        $articulo = new Articulo(
            5,
            'Cámara Canon EOS R5',
            'Canon EOS R5',
            2,
            [1, 4],
            3,
            3499.00
        );

        // Se añade el artículo a la tabla
        $this->tabla[] = $articulo;
    }

    //Lo declaramos estáticos porque no cambian datos
    static public function mostrarAsignaturas($asignaturas, $asignaturasAlumno)
    {

        $array = [];

        foreach ($asignaturasAlumno as $indice) {

            $array[] = $asignaturas[$indice];
        }

        asort($array);
        return $array;
    }

    public function create(Alumno $data)
    {
        $this->tabla[] = $data;
    }

    public function delete($indice)
    {

        unset($this->tabla[$indice]);
        $this->tabla = array_values($this->tabla);
    }

    public function read($indice)
    {
        return $this->tabla[$indice];
    }

    public function update($indice, Alumno $data)
    {
        $this->tabla[$indice] = $data;
    }

    private function compararPorDescripcion($a, $b)
    {
        return strcmp($a->getDescripcion(), $b->getDescripcion());
    }

    private function compararPorModelo($a, $b)
    {
        return strcmp($a->getModelo(), $b->getModelo());
    }

    private function getMarcaPorIndice($indice)
    {
        $marcas = ArrayArticulos::getMarcas();
        return $marcas[$indice];
    }

    private function compararPorMarca($a, $b)
    {
        $marcaA = $this->getMarcaPorIndice($a->getMarca());
        $marcaB = $this->getMarcaPorIndice($b->getMarca());
        return strcmp($marcaA, $marcaB);
    }

    private function getCategoriaPorIndice($indice)
    {
        $asignaturas = ArrayArticulos::getasignaturas();
        return $asignaturas[$indice];
    }

    private function compararPorasignaturas($a, $b)
    {
        $categoriaA = $this->getCategoriaPorIndice($a->getasignaturas()[0]);
        $categoriaB = $this->getCategoriaPorIndice($b->getasignaturas()[0]);
        return strcmp($categoriaA, $categoriaB);
    }

    private function compararPorUnidades($a, $b)
    {
        return intval($a->getUnidades()) <=> intval($b->getUnidades());
    }

    private function compararPorPrecio($a, $b)
    {
        return intval($a->getPrecio()) <=> intval($b->getPrecio());
    }

    public function ordenarArticulos($criterio)
    {
        switch ($criterio) {
            case 'descripcion':
                usort($this->tabla, [$this, 'compararPorDescripcion']);
                break;
            case 'modelo':
                usort($this->tabla, [$this, 'compararPorModelo']);
                break;
            case 'marca':
                usort($this->tabla, [$this, 'compararPorMarca']);
                break;
            case 'asignaturas':
                usort($this->tabla, [$this, 'compararPorasignaturas']);
                break;
            case 'unidades':
                usort($this->tabla, [$this, 'compararPorUnidades']);
                break;
            case 'precio':
                usort($this->tabla, [$this, 'compararPorPrecio']);
                break;
        }
    }
}
